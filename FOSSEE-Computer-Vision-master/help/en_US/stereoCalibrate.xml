<?xml version="1.0" encoding="UTF-8"?>

<!--
 *
 * This help file was generated from stereoCalibrate.sci using help_from_sci().
 *
 -->

<refentry version="5.0-subset Scilab" xml:id="stereoCalibrate" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:scilab="http://www.scilab.org"
          xmlns:db="http://docbook.org/ns/docbook">

  <refnamediv>
    <refname>stereoCalibrate</refname>
    <refpurpose>Takes in 3D points and outputs the corresponding 2D points in image plane</refpurpose>
  </refnamediv>


<refsynopsisdiv>
   <title>Calling Sequence</title>
   <synopsis>
   [rotMatrix Transvec EMatrix FMatrix] = stereoCalibrate(list_size,calibPoints,ProjcalibPoints1,ProjcalibPoints2,camera1,dist1,camera2,dist2,width,height);
   
   </synopsis>
</refsynopsisdiv>

<refsection>
   <title>Parameters</title>
   <variablelist>
   <varlistentry><term>matrixofdouble calibPoints :</term>
      <listitem><para> vector of vector of calibration points</para></listitem></varlistentry>
   <varlistentry><term>matrixofdouble ProjcalibPoints1 :</term>
      <listitem><para> vector of vector of projection of calibration points by first camera</para></listitem></varlistentry>
   <varlistentry><term>matrixofdouble ProjcalibPoints2 :</term>
      <listitem><para> vector of vector of projection of calibration points by second camera</para></listitem></varlistentry>
   <varlistentry><term>matrixofdouble camera1 :</term>
      <listitem><para> first camera matrix</para></listitem></varlistentry>
   <varlistentry><term>matrixofdouble dist1 :</term>
      <listitem><para> vector of distortion coefficients for first camera</para></listitem></varlistentry>
   <varlistentry><term>matrixofdouble camera2 :</term>
      <listitem><para> second camera matrix</para></listitem></varlistentry>
   <varlistentry><term>matrixofdouble dist2 :</term>
      <listitem><para> vector of distortion coefficients for second camera</para></listitem></varlistentry>
   <varlistentry><term>double width,height :</term>
      <listitem><para> size of image in pixels</para></listitem></varlistentry>
   <varlistentry><term>rotMatrix :</term>
      <listitem><para> rotation matrix</para></listitem></varlistentry>
   <varlistentry><term>TransVec :</term>
      <listitem><para> translation vector</para></listitem></varlistentry>
   <varlistentry><term>EMatrix :</term>
      <listitem><para> essential matrix</para></listitem></varlistentry>
   <varlistentry><term>FMatrix :</term>
      <listitem><para> fundamental matrix</para></listitem></varlistentry>
   </variablelist>
</refsection>

<refsection>
   <title>Description</title>
   <para>
The function outputs the corresponding 2D points in image plane.
   </para>
   <para>
</para>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[
inImage = imread("1.jpg");
inImage2 = imread("2.jpg");
[found coordinates ] = findChessboardCorners(inImage,7,7,"CV_CALIB_CB_ADAPTIVE_THRESH");
[found2 coordinates2 ] = findChessboardCorners(inImage2,7,7,"CV_CALIB_CB_ADAPTIVE_THRESH");
obpts = [0    0    0
1    0    0
2    0    0
3    0    0
4    0    0
5    0    0
6    0    0
0    1    0
1    1    0
2    1    0
3    1    0
4    1    0
5    1    0
6    1    0
0    2    0
1    2    0
2    2    0
3    2    0
4    2    0
5    2    0
6    2    0
0    3    0
1    3    0
2    3    0
3    3    0
4    3    0
5    3    0
6    3    0
0    4    0
1    4    0
2    4    0
3    4    0
4    4    0
5    4    0
6    4    0
0    5    0
1    5    0
2    5    0
3    5    0
4    5    0
5    5    0
6    5    0
0    6    0
1    6    0
2    6    0
3    6    0
4    6    0
5    6    0
6    6    0
];
camera1 = [1 0 0
0 1 0
0 0 1];
camera2 = camera1;
dist = [0
0
0
0];
dist2 = dist;
dist1 = dist;
width = 700;
height = 525;
obPts = list(obpts);
coordinates1 = list(coordinates);
coordinates2 = list(coordinates2);
[rotMatrix Transvec EMatrix FMatrix] = stereoCalibrate(1,obPts,coordinates1,coordinates2,camera1,dist1,camera2,dist2,width,height);

Author
Kevin George
   ]]></programlisting>
</refsection>
</refentry>
